.. CL Lab Project documentation master file

:index:`Project`
          
Lab Project of Compilers - FIB UPC, 2022
========================================

.. toctree::
   :hidden:

   asl
   modules
   modules/typemanager              
   modules/symboltable
   modules/decoration
   modules/code
   modules/semerrors
   tvm
   steps

The lab project will consist of building a compiler for an simplified imperative language named ASL (standing for *A Simple Language*).

The project will consist of:

* Writting a grammar for the language, and use ANTLR4 to generate a parser in C++
* Writting a semantic check module (in C++) that performs semantic analysis (i.e. variable type checking) on the tree produced by the parser on a given input program.
* Writting a code generation module (in C++) that generates low-level code for the input program. We will generate simple 3-address code that will run on a custom virtual machine called tVM (standing for *t-code Virtual Machine*).

In order to do the work, you will have some help:
   
* You will be using ANTLR-4, a powerful tool that will make it much easier to build your compiler.
* You will be provided with a basic working compiler (with just assignment instructions and sum operations) which you will need to complete until your ASL compiler is finished.
* You will also be provided with some auxiliary modules to help manage the data structures required to build the compiler.
* Finally, you will be provided with a list of ASL programs to incrementally test your compiler.

Here you will find further documentation about:

* :doc:`The target language, ASL <asl>`
* :doc:`The provided compiler skeleton and auxiliary modules <modules>`
* :doc:`The description of tVM machine and the language it can execute <tvm>`
* :doc:`The description of incremental program tests <steps>`

You can also download the required code (also available at *$HOME/assig/cl/practica/* in FIB labs):
  
* :download:`Project base files <files/CL-lab.tgz>`.

             
.. Indices and tables
.. ==================
.. 
.. * :ref:`genindex`
.. * :ref:`modindex`
.. * :ref:`search`
